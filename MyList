#include <iostream>
using namespace std;

template <class T>

class MyList
{
	private:
		T *a;
		int size;
		void quickSort(const int x, const int y)
		{
			int i, k;
			T m, t;
			i = x; 
			k = y; 
			m = a[(i+k)/2];
			while (i <= k)
			{
				while(a[k] > m) 
					k--;
				while(a[i] < m) 
					i++;
				if(i <= k){
					t = a[i]; 
					a[i] = a[k]; 
					a[k] = t;
					i++; 
					k--;
				}
			}
			if(x < k) 
				quickSort(x, k);
			if(i < y) 
				quickSort(i, y);
		}
	public:
		MyList()
		{
			size = 0;
			a = new T [size];
		}
		void push(const T &item)
		{
			try
			{
				size++;
				MyList tmp(*this);
				delete [] a;
				a = new T[size];
				for (int i=0; i<size-1; ++i) 
					a[i] = tmp[i];
				a[size-1] = item;
			}
			catch(...)
			{
				cerr << "Wrong type! Please check it!";
				exit(1);
			}
		}//add item to the last of the list
		void clean()
		{
			size = 0;
			delete [] a;
			a = new T [0];
		}//clean the list		
		int get_size() const
		{
			return size;
		}//return the number of the elements of mylist
		T pop()
		{
			try
			{
				size--;
				MyList tmp(*this);
				T t = a[size];
				delete [] a;
				a = new T[size];
				for (int i=0; i<size; ++i) a[i] = tmp[i];
				return t;
			}
			catch(...)
			{
				cerr << "Empty set!";
				exit(1);
			}
		}//erase the last element of mylist and return it
		void insert(int index, const T &item)
		{
			try
			{
				if(index<0 || index>size) throw 0;
			}
			catch(...)
			{
				cerr << "Error! Index is out of range!";
				exit(1);
			}
			int i;
			MyList tmp(*this);			
			size++;
			delete [] a;
			a = new T [size];
			for (i=0; i<index; ++i) 
				a[i] = tmp[i];
			a[i++] = item;
			for (; i<size; ++i) 
				a[i] = tmp[i-1];
		}//insert item to place
		void erase(int start, int end)
		{
			try
			{
				if (start > end) 
					throw 0;
			}
			catch(...)
			{
				cerr << "Wrong index! Check it!";
				exit(1);
			}
			try
			{
				if (start<0 || start>=size || end>=size) throw 1;
			}
			catch(...)
			{
				cerr << "Error! Index is out of range!";
				exit(1);
			}
			int i;
			MyList tmp(*this);
			size -= end-start+1;
			delete [] a;
			a = new T [size];
			for (i=0; i<start; ++i) 
				a[i] = tmp[i];
			for (; i<size; ++i) 
				a[i] = tmp[i-start+1+end];
		} //delete the elements in mylist with an index from start to end, both bounderies are included
		T get_item(int index)
		{
			try
			{
				if(index >= size) throw 0;
			}
			catch(...)
			{
				cerr << "Error! Index is out of range!";
				exit(1);
			}
			return a[index];
		}//return the element with that index
		MyList get_item(int start, int end)
		{
			if (start < 0) 
				start += size;
			if (end < 0) 
				end += size;
			if (start > end) 
			{
				MyList tmp; tmp.a = new T [0]; tmp.size = 0; return tmp;
			}
			else 
			{
				int i;
				MyList tmp;
				for (i=0; i<end-start+1; ++i) tmp += a[start+i];
				return tmp;
			}
		}//return part of mylist as a new list, nagative numbers are acceptable,just like python
		int count(const T &item)
		{
			int c = 0;
			for (int i=0; i<size; ++i) if(a[i]==item) c++;
			return c;
		}//return the number of item in the list
		void remove(const T &item)
		{
			int i;
			for (i=0; i<size; ++i) 
				if(a[i]==item) 
					break;
			if(i!=size)
			{
				MyList tmp(*this);
				size--;
				a = new T [size];
				for (int j=0; j<i; ++j) 
					a[j] = tmp[j];
				for (int j=i+1; j<size+1; ++j) 
					a[j-1] = tmp[j];
			}
		}//delete the first element equal to item in mylist
		MyList(int num, const T &item)
		{
			try
			{
				a = new T [num];
				size = num;
				for (int i=0; i<num; ++i) 
					a[i] = item;
			}
			catch(...)
			{
				cerr << "The number you input is negative!";
				exit(1);
			}			
		}//push item into mylist for t times
		
		MyList(const MyList &l)
		{
			size = l.get_size();
			a = new T[size];
			for (int i=0; i<size; ++i) 
				a[i] = l[i];	
		}//copy another mylist
    	
		MyList(T *arr, int len)
		{
			try
			{
				a = new T[len];
				size = len;
				for (int i=0; i<len; ++i) 
					a[i] = arr[i];
			}
			catch(...)
			{
				cerr << "The number you input is negative!";
				exit(1);
			}
		}//construct mylist, using the first len numbers of array arr
		friend MyList operator + (const MyList &l1, const MyList &l2)
		{
			MyList tmp(l1);
			tmp += l2;
			return tmp;
		}//combine two MyLists together and return the result
    	friend MyList operator + (const MyList &l1, const T &item)
		{
			MyList tmp();
			tmp.size = l1.size + 1;
			delete [] tmp.a;
			for (int i = 0; i < l1.size; ++i) 
				tmp.a[i] = l1.a[i];
			tmp.a[tmp.size-1] = item;
			return tmp;
		} //same as push item except the original mylist is unchanged and a new mylist is returned
		MyList &operator = (const MyList &l)
		{
			if (&l==this) 
				return *this;
			size = l.get_size();
			delete [] a;
			a = new T [size];
			for (int i=0; i<size; ++i)
			{
				a[i] = l[i];
			}
			return *this;
		}//assign the value
		MyList &operator += (const T &item)
		{
			push(item);
			return *this;
		}//the same as push(T item)	
		MyList &operator += (const MyList &l)
		{
			for(int i=0; i<l.size; i++) 
				push(l.a[i]);
			return *this;
		}//add another mylist after this mylist
		T &operator [](int index) const 
		{
			try
			{
				if(index>=size) throw 0;
			}
			catch(...)
			{
				cerr << "Error! Index is out of range!";
				exit(1);
			}
			return a[index];
		}//return the element with that index
		friend ostream & operator<<(ostream &os, const MyList &obj)
		{
			if(obj.size > 0)
			{
				os << "[";
				for (int i=0; i<obj.size-1; ++i) 
					os << obj.a[i] << ", ";
				os << obj.a[obj.size-1] << "]" << endl;
				return os;
			}
			else
			{
				os << "[]";
				return os;
			}
		}//If T can be output directly (like integer),output it, using the same pattern in python
    // for example [1, 2, 5, 4, 1]
		void sort(bool less=true)
		{
			quickSort(0, size-1);
			if (!less) 
				reverse();
		}//sort the list with quick sort method
    	// If less=true，from the least to the biggest,otherwise the opposite
		void reverse()
		{
			int i;
			MyList tmp(*this);
			delete [] a;
			a = new T [size];
			for(i=0; i<size; ++i) 
				a[i] = tmp[size-1-i];
		}//reverse the elements in mylist
		void double_space()
		{
			try
			{
				if (size==0) throw 0;
			}
			catch(...) 
			{
				cout << "The list cann't be doubled!"; 
				return;
			}
			size *= 2;
			MyList tmp(*this);
			delete [] a;
			a = new T [size];
			for (int i=0; i<size/2; ++i) 
				a[i] = tmp[i]; 
		}
		~MyList(){delete [] a;}
};		
int main(){
	MyList<int> a, b;
	int i;
	for (i=0; i<5; ++i)
		a.push(i);
	a[3] = 15; // a = [0, 1, 2, 15, 4]
	a.sort();
	cout << a;
	a.reverse(); // a = [15, 4, 2, 1, 0]
	a += 12; // a = [15, 4, 2, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
			cout<<a[i]<<endl;
    b = a.get_item(4, -3); // b = [] *If start > end，return a void list.
   	b = a.get_item(3, -1); // b = [1, 0, 12] 
	a += b; // a = [15, 4, 2, 1, 0, 12, 1, 0, 12]
	for (i=0; i<a.get_size(); ++i)
		cout<<a.get_item(i)<<endl;
	cout<<a.count(5)<<endl;
	b.clean(); // b = []
	cout<<b.get_size()<<endl;
	a.erase(2, 5); // a = [15, 4, 1, 0, 12]
	b = a + a; // b = [15, 4, 1, 0, 12, 15, 4, 1, 0, 12]
	b.insert(3, 116); // b = [15, 4, 1, 116, 0, 12, 15, 4, 1, 0, 12]
	b.remove(4); // b = [15, 1, 116, 0, 12, 15, 4, 1, 0, 12]
	cout<<b<<endl;
	MyList<double> c(10, 3.14);
	for (i=0; i<100; ++i)
		c.push(1.1*i);
	cout<<c.get_item(100, 105)<<endl;	
	return 0;
}
